{"version":3,"sources":["Chat/index.js","login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","chatSection","width","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","gMessageList","usersList","currentUser","Chat","props","classes","userId","nickname","token","console","log","useState","user","setUser","openchannel","setOpenChannel","participantList","setParticipantList","sendBirdObj","setSendBirdObj","message","setMessage","messageList","setMessageList","history","useHistory","useEffect","push","initSendBird","senBird","SendBird","appId","localCacheEnabled","connect","cuser","error","alert","OpenChannel","getChannel","openChannel","enter","response","operator","isOperatorWithUserId","myMuteInfo","getMyMutedInfo","muteInfo","then","createParticipantListQuery","next","participantsList","createMutedUserListQuery","mutedList","merror","length","index","findIndex","muser","id","muted","map","participant","channelHandler","ChannelHandler","onUserEntered","channel","usersListToUpdate","onUserExited","filter","users","onUserMuted","Muser","userMList","onUserUnmuted","onOperatorUpdated","operators","participantToUpdate","onMessageReceived","rmessage","cMessages","addChannelHandler","messageQuery","createPreviousMessageListQuery","limit","reverse","preMessage","load","preMessageList","pMessages","style","Grid","container","item","xs","Typography","variant","className","onClick","participants","component","Paper","List","ListItem","button","key","ListItemIcon","Avatar","sx","bgcolor","charAt","ListItemText","primary","isActive","secondary","align","Divider","toUser","removeOperators","addOperators","unmuteUserWithUserId","muteUserWithUserId","msgs","messageId","_sender","Date","createdAt","toLocaleTimeString","padding","TextField","value","onChange","event","msg","target","label","fullWidth","Fab","color","aria-label","params","UserMessageParams","sendUserMessage","smessage","messages","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","submit","margin","Login","onSubmit","Container","maxWidth","CssBaseline","e","preventDefault","required","name","autoFocus","Button","type","App","config","setconfig","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c166734b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendBird from \"sendbird\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '80vh'\r\n  },\r\n  headBG: {\r\n      backgroundColor: '#e0e0e0'\r\n  },\r\n  borderRight500: {\r\n      borderRight: '1px solid #e0e0e0'\r\n  },\r\n  messageArea: {\r\n    height: '70vh',\r\n    overflowY: 'auto'\r\n  }\r\n});\r\nlet gMessageList = [];\r\nlet usersList = [];\r\nlet currentUser = {};\r\n\r\nconst Chat = (props) => {\r\n  const classes = useStyles();\r\n  const {userId, nickname, token} = props;\r\n  console.log(\"userId\", userId, nickname);\r\n  const [user, setUser] = useState({});\r\n  const [openchannel, setOpenChannel] = useState();\r\n  const [participantList, setParticipantList] = useState([]);\r\n  const [sendBirdObj, setSendBirdObj] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (!userId || !nickname) {\r\n      history.push('/');\r\n    }\r\n    initSendBird();\r\n  }, [userId, nickname, history]);\r\n\r\n  const initSendBird = () => {\r\n    const senBird = new SendBird({ appId: \"5940C601-4B1D-459E-8D96-E4CCEE22FFDC\", localCacheEnabled: true });\r\n    setSendBirdObj(senBird)\r\n    senBird.connect(userId, token, function (cuser, error) {\r\n      if (error) {\r\n          console.log(\"error in connection\", error);\r\n          alert(\"error\");\r\n          return;\r\n        // Handle error.\r\n      }\r\n      console.log(\"user connectd\", cuser);\r\n      \r\n\r\n    senBird.OpenChannel.getChannel(\"sendbird_open_channel_15603_da803df313a88ef3878d088118b10cd3294da796\", function (openChannel, error) {\r\n      if (error) {\r\n        // Handle error.\r\n        alert(\"error in connecting to channel\");\r\n        return;\r\n      }\r\n      setOpenChannel(openChannel);\r\n\r\n      // Call the instance method of the result object in the \"openChannel\" parameter of the callback function.\r\n      openChannel.enter(function (response, error) {\r\n        if (error) {\r\n\r\n          // Handle error.\r\n        }\r\n        cuser.operator = openChannel.isOperatorWithUserId(userId);\r\n        const myMuteInfo = openChannel.getMyMutedInfo(function(muteInfo, error) {\r\n            console.log(\"My Mute Info\", myMuteInfo);\r\n            myMuteInfo.then(muteInfo => {\r\n                console.log(\"here come mute Info\", muteInfo);\r\n            })\r\n        })\r\n        \r\n        const listQuery = openChannel.createParticipantListQuery(); //openChannel.createOperatorListQuery(); // openChannel.createParticipantListQuery()\r\n        \r\n            listQuery.next(function (participantsList, error) {\r\n                if (error) {\r\n                  // Handle error.\r\n                }\r\n                if(cuser.operator) {\r\n                const mutedQuery = openChannel.createMutedUserListQuery();\r\n                mutedQuery.next(function (mutedList, merror) {\r\n                    console.log(\"mutedList\", mutedList);\r\n                    if(mutedList.length > 0) {\r\n                      const index = mutedList.findIndex(muser => muser.id === userId)\r\n                      if(index !== -1) {\r\n                          cuser.muted = true;\r\n                      } else {\r\n                          cuser.muted = false;\r\n                      }\r\n                      setUser(cuser);\r\n                      currentUser = cuser;\r\n                    } else {\r\n                        console.log(\"Hey Cuser\", cuser);\r\n                        cuser.muted = false;\r\n                        setUser(cuser);\r\n                        currentUser = cuser;\r\n                    }\r\n                    participantsList.map(participant => {\r\n                          if(mutedList.length > 0) {\r\n                              const index = mutedList.findIndex(muted => muted.userId === participant.userId)\r\n                              if(index !== -1) {\r\n                                  participant.muted = true;\r\n                              } else {\r\n                                  participant.muted = false;\r\n                              }\r\n                          } else {\r\n                              participant.muted = false;\r\n                          }\r\n                          participant.operator = openChannel.isOperatorWithUserId(participant.userId);\r\n                      });\r\n      \r\n                      console.log('participantList', participantsList);\r\n                      setParticipantList(participantsList);\r\n                \r\n                    usersList = participantsList;\r\n                    console.log(\"userList in loadddd state\", usersList);\r\n                });\r\n            } else {\r\n                    cuser.muted = false;\r\n                    setUser(cuser);\r\n                    currentUser = cuser;\r\n                    participantsList.map(participant => {\r\n                        participant.operator = openChannel.isOperatorWithUserId(participant.userId);\r\n                        participant.muted = false;\r\n                    });\r\n                    setParticipantList(participantsList);\r\n                    usersList = participantsList;\r\n                }\r\n                \r\n              });\r\n        \r\n        \r\n        \r\n        const channelHandler = new senBird.ChannelHandler();\r\n\r\n        channelHandler.onUserEntered = function(channel, user) {\r\n            user.operator = openChannel.isOperatorWithUserId(user.userId);\r\n            const usersListToUpdate = [...usersList, user];\r\n            console.log(\"user joined\", user);\r\n\r\n            setParticipantList(usersListToUpdate);\r\n            usersList = usersListToUpdate;\r\n            console.log(\"users list on user joined\", usersList);\r\n        }\r\n        channelHandler.onUserExited = function(channel, user) {\r\n            const usersListToUpdate = [...usersList];\r\n            console.log(\"user left\", user);\r\n            usersListToUpdate.filter(users => user.userId !== users.userId);\r\n            setParticipantList(usersListToUpdate);\r\n            usersList = usersListToUpdate;\r\n        }\r\n        channelHandler.onUserMuted = function(channel, Muser) {\r\n            console.log(\"user is mutedddddddd\", Muser);\r\n            const usersListToUpdate = [...usersList];\r\n            const index = usersListToUpdate.findIndex(userMList => userMList.userId === Muser.userId);\r\n            if(index !== -1) {\r\n                usersListToUpdate[index].muted = true;\r\n            }\r\n            setParticipantList(usersListToUpdate);\r\n            usersList = usersListToUpdate;\r\n        }\r\n        channelHandler.onUserUnmuted = function(channel, Muser) {\r\n            const usersListToUpdate = [...usersList];\r\n            const index = usersListToUpdate.findIndex(userMList => userMList.userId === Muser.userId);\r\n            if(index !== -1) {\r\n                usersListToUpdate[index].muted = false;\r\n            }\r\n            setParticipantList(usersListToUpdate);\r\n            usersList = usersListToUpdate;\r\n        }\r\n        channelHandler.onOperatorUpdated = function(channel, operators) {\r\n            console.log(\"operators updated\", operators, usersList);\r\n            const participantToUpdate = [...usersList];\r\n            // operators.map(operator => {\r\n            //     participantToUpdate[participantToUpdate.findIndex(part => part.userId === operator.userId)].creator = true;\r\n            // })\r\n            const index = operators.findIndex(operator => operator.userId === currentUser.userId);\r\n            if(index !== -1) {\r\n                currentUser.operator = true;\r\n                setUser(currentUser);\r\n            } else {\r\n                currentUser.operator = false;\r\n                setUser(currentUser);\r\n            }\r\n            participantToUpdate.map((participant) => {\r\n                participant.operator = openChannel.isOperatorWithUserId(participant.userId);\r\n            })\r\n            console.log(\"Operators in eventssssss\",participantToUpdate);\r\n           setParticipantList(participantToUpdate);\r\n           usersList = participantToUpdate;\r\n\r\n        }\r\n\r\n        channelHandler.onMessageReceived = function (channel, rmessage) {\r\n          console.log('channel ,message', channel, rmessage);\r\n          const cMessages = [...gMessageList];\r\n          cMessages.push(rmessage);\r\n          gMessageList.push(rmessage);\r\n          setMessageList(cMessages);\r\n        };\r\n        senBird.addChannelHandler('123456774567', channelHandler);\r\n        const messageQuery = openChannel.createPreviousMessageListQuery({\r\n            limit: 30,\r\n            reverse: true\r\n        });\r\n        console.log(\"messageQuery\", messageQuery);\r\n        const preMessage = messageQuery.load();\r\n        console.log(\"preMessage\", preMessage);\r\n        preMessage.then(preMessageList => {\r\n            console.log(\"preMessageList\", preMessageList);\r\n            const pMessages = [...gMessageList, ...preMessageList];\r\n            setMessageList(pMessages);\r\n            gMessageList = pMessages;\r\n        });\r\n      });\r\n    });\r\n});\r\n  }\r\n\r\n  const loadParticipants = () => {\r\n    const listParticipantQuery = openchannel.createParticipantListQuery();\r\n    listParticipantQuery.next(function (participants, error) {\r\n        if (error) {\r\n          // Handle error.\r\n          return;\r\n        }\r\n        console.log('participantList', participants);\r\n        setParticipantList(participants);\r\n      });\r\n  }\r\n\r\n  \r\n\r\n  const sendMessage = () => {\r\n    const params = new sendBirdObj.UserMessageParams();\r\n        params.message = message;\r\n        openchannel.sendUserMessage(params, function (smessage, error) {\r\n          if (error) {\r\n            // Handle error.\r\n            alert(\"You are on Mute\");\r\n            return;\r\n          }\r\n          console.log('message send success fully', smessage);\r\n          const messages = [...gMessageList];\r\n          messages.push(smessage);\r\n          gMessageList.push(smessage);\r\n          setMessageList(messages);\r\n          setMessage(\"\");\r\n        });\r\n  }\r\n\r\n  const handleChangeMesaage = (msg) => {\r\n    setMessage(msg);\r\n  }\r\n  const handleMuteUnmute = (toUser) => {\r\n      console.log(\"toUser\", toUser);\r\n      if(toUser.muted) {\r\n          openchannel.unmuteUserWithUserId(toUser.userId)\r\n      } else {\r\n        openchannel.muteUserWithUserId(toUser.userId)\r\n      }\r\n  }\r\n\r\n  const addOrRemoveOperator = (toUser) => {\r\n    if(toUser.operator) {\r\n        openchannel.removeOperators([toUser.userId], function(response) {\r\n            console.log(\"Operator removed\", usersList)\r\n            // const participantToUpdate = [...usersList];\r\n            // participantToUpdate[participantToUpdate.findIndex(partici => partici.userId === toUser.userId)].creator = false;\r\n            // setParticipantList(participantToUpdate);\r\n            // console.log(\"participantToUpdate operatorssss\", participantToUpdate)\r\n            // usersList = participantToUpdate;\r\n        })\r\n    } else {\r\n        console.log(\"Adding ....\")\r\n      openchannel.addOperators([toUser.userId], function(response) {\r\n          console.log(\"Operator added\", usersList);\r\n        //   const participantToUpdate = [...usersList];\r\n        //     participantToUpdate[participantToUpdate.findIndex(partici => partici.userId === toUser.userId)].creator = true;\r\n        //     console.log(\"participantToUpdate operatorssss\", participantToUpdate)\r\n        //     setParticipantList(participantToUpdate);\r\n        //     usersList = participantToUpdate;\r\n      })\r\n    }\r\n  }\r\n \r\n\r\n\r\n  return (\r\n      <div style={{height: '100vh'}}>\r\n        <Grid container>\r\n            <Grid item xs={12} >\r\n                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\r\n            </Grid>\r\n            <button onClick={loadParticipants}>Load</button>\r\n        </Grid>\r\n        <Grid container component={Paper} className={classes.chatSection}>\r\n            <Grid item xs={3} className={classes.borderRight500}>\r\n                <List>\r\n                    <ListItem button key=\"RemySharp\" >\r\n                        <ListItemIcon>\r\n                        <Avatar sx={{ bgcolor: \"green\" }}>{user?.nickname?.charAt(0)} </Avatar>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={user.nickname}>{user.nickname}</ListItemText>\r\n                        {user.isActive && (\r\n                            <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\r\n                        )}\r\n                        \r\n                        \r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List>\r\n                    {participantList.filter(participant => participant.userId !== user.userId).map(participant => {\r\n                        return (\r\n                            <ListItem button key={participant.userId} >\r\n                                <ListItemIcon>\r\n                                    <Avatar>{participant.nickname.charAt(0)} </Avatar>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={participant.nickname}>{participant.nickname}</ListItemText>\r\n                                {user.operator && (\r\n                                    <button onClick={()=>{addOrRemoveOperator(participant)}}>{participant.operator ? '-' : '+'}</button>\r\n                                )}\r\n                                {user.operator && (\r\n                                    <button onClick={()=>{handleMuteUnmute(participant)}}>{participant.muted ? 'Unmute' : 'Mute'}</button>\r\n                                )}\r\n                                {participant.isActive && (\r\n                                    <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\r\n                                )}\r\n                                \r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <List className={classes.messageArea}>\r\n                    {messageList && messageList.map(msgs => {\r\n                        return (\r\n                            <ListItem key={msgs.messageId}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <ListItemText align={msgs._sender.userId === user.userId ? 'right' : 'left'} primary={msgs.message}></ListItemText>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <ListItemText align={msgs._sender.userId === user.userId ? 'right' : 'left'} secondary={new Date(msgs.createdAt).toLocaleTimeString(\"en-US\")}></ListItemText>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                    {/* <ListItem key=\"1\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Hey man, What's up ?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"09:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"2\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" primary=\"Hey, Iam Good! What about you ?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" secondary=\"09:31\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"3\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Cool. i am good, let's catch up!\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"10:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem> */}\r\n                </List>\r\n                <Divider />\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <Grid item xs={11}>\r\n                        <TextField id=\"outlined-basic-email\" value={message} onChange={(event)=> {handleChangeMesaage(event.target.value)}} label=\"Type Something\" fullWidth />\r\n                    </Grid>\r\n                    <Grid item xs={1} align=\"right\">\r\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={sendMessage}><SendIcon /></Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport {\r\n  useHistory,\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login({ onSubmit }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Login\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            onSubmit({\r\n              userId: e.target.userId.value,\r\n              nickname: e.target.nickname.value,\r\n              token: e.target.token.value\r\n            });\r\n            history.push('/chat');\r\n          }}\r\n        >\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"userId\"\r\n            label=\"User Id\"\r\n            name=\"userId\"\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"nickname\"\r\n            label=\"Nick Name\"\r\n            id=\"nickname\"\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            name=\"token\"\r\n            label=\"Token\"\r\n            id=\"token\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Start\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport SendBird from \"sendbird\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Chat from './Chat';\r\nimport Login from './login';\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   const senBird = new SendBird({appId: '5940C601-4B1D-459E-8D96-E4CCEE22FFDC', localCacheEnabled: true });\r\n  //   senBird.connect('admin123',  function(user, error) {\r\n  //     if (error) {\r\n  //         // Handle error.\r\n  //     }\r\n  //     console.log(\"user connected\", user);\r\n  //     senBird.OpenChannel.getChannel('sendbird_open_channel_15603_da803df313a88ef3878d088118b10cd3294da796', function(openChannel, error) {\r\n  //       if (error) {\r\n  //           // Handle error.\r\n  //       }\r\n  //       openChannel.enter(function(response, error) {\r\n  //         if (error) {\r\n  //             // Handle error.\r\n  //         }\r\n  //         console.log(\"entered to channel\")\r\n  //         const params = new senBird.UserMessageParams();\r\n  //               params.message = \"This is a sample message sendBird regular user\";\r\n  //               openChannel.sendUserMessage(params, function(message, error) {\r\n  //                   if (error) {\r\n  //                     // Handle error.\r\n  //                   }\r\n  //                   console.log(\"message send success fully\", message);\r\n  //               });\r\n  //       });\r\n  //     });\r\n  // });\r\n  // }, [])\r\n\r\n\r\n  const [config, setconfig] =useState({});\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n      <Switch>\r\n          <Route path=\"/chat\">\r\n            <Chat\r\n              userId={config.userId}\r\n              nickname={config.nickname}\r\n              token={config.token}\r\n            />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Login onSubmit={setconfig} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}